# The original was autogenerated by maturin v0.14.15
on:
  push:
    branches:
      - "main"
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint_and_test:
    name: Lint & Test
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.13", "pypy3.11"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Explicitly Configure PyO3 for PyPy
        if: startsWith(matrix.python-version, 'pypy')
        run: |
          # 1. Path to PyPy executable
          PY_EXECUTABLE=$(which python3)
          # 2. Path to Shared-Library file
          PY_LIB_FILE=$(find ${{ env.pythonLocation }} -name "libpypy*-c.so" | head -n 1)
          # 3. Path to Shared-Library directory
          PY_LIB_DIR=$(dirname "$PY_LIB_FILE")

          if [ -z "$PY_LIB_FILE" ]; then
            echo "::error::PyPy shared library (.so file) could not be found!"
            exit 1
          fi

          echo "Found PyPy executable: $PY_EXECUTABLE"
          echo "Found PyPy library file: $PY_LIB_FILE"
          echo "Found PyPy library directory: $PY_LIB_DIR"

          echo "PYO3_PYTHON=$PY_EXECUTABLE" >> $GITHUB_ENV
          echo "PYO3_PYPY_LIB=$PY_LIB_FILE" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$PY_LIB_DIR" >> $GITHUB_ENV
      - name: Run Cargo Tests under GDB (PyPy only)
        if: startsWith(matrix.python-version, 'pypy')
        run: |
          sudo apt-get update && sudo apt-get install -y gdb
          cargo test --no-run --features python
          TEST_EXE=$(find target/debug/deps -type f -executable -name "ocr_stringdist-*" ! -name "*.d" | head -n 1)
          echo "Running test executable under GDB: $TEST_EXE"
          gdb -ex "run" -ex "bt" --batch --args $TEST_EXE -- --nocapture --test-threads=1
      - name: Run Cargo Tests
        run: cargo test --features python -- --nocapture --test-threads=1
      - name: Run pytest
        run: |
          # just venv pytest
          rm -rf .venv
          python3 -m venv .venv
          . .venv/bin/activate
          .venv/bin/pip install wheel pytest maturin
          maturin develop
          .venv/bin/pytest python/tests

  linux:
    name: Build Wheels (Linux)
    runs-on: ubuntu-latest
    needs: lint_and_test
    strategy:
      matrix:
        platform:
          - target: x64
            interpreter: 3.9 3.10 3.11 3.12 3.13 pypy3.9 pypy3.10 pypy3.11
          - target: aarch64
            interpreter: 3.9 3.10 3.11 3.12 3.13 pypy3.9 pypy3.10 pypy3.11
          - target: armv7
            interpreter: 3.9 3.10 3.11 3.12 3.13 pypy3.9 pypy3.10 pypy3.11
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i ${{ matrix.platform.interpreter }}
          sccache: "true"
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    name: Build Wheels (musllinux)
    runs-on: ubuntu-latest
    needs: lint_and_test
    strategy:
      matrix:
        platform:
          - target: x86_64-unknown-linux-musl
            arch: x86_64
            interpreter: 3.9 3.10 3.11 3.12 3.13 pypy3.9 pypy3.10 pypy3.11
          - target: i686-unknown-linux-musl
            arch: x86
            interpreter: 3.9 3.10 3.11 3.12 3.13 pypy3.9 pypy3.10 pypy3.11
          - target: aarch64-unknown-linux-musl
            arch: aarch64
            interpreter: 3.9 3.10 3.11 3.12 3.13 pypy3.9 pypy3.10 pypy3.11
        # all values: [x86_64, x86, aarch64, armhf, armv7, ppc64le, riscv64, s390x]
        # { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7" },
        # { target: "powerpc64le-unknown-linux-musl", image_tag: "ppc64le" },
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i ${{ matrix.platform.interpreter }}
          sccache: "true"
          manylinux: musllinux_1_1
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musl-${{ matrix.platform.arch }}
          path: dist

  windows:
    name: Build Wheels (Windows)
    runs-on: windows-latest
    needs: lint_and_test
    strategy:
      matrix:
        target: [x64, x86]
        interpreter: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.interpreter }}
          architecture: ${{ matrix.target }}
      - name: Ensure pythonXY.lib exists (for PyO3 on Windows)
        shell: pwsh
        run: |
          $py = "${{ matrix.interpreter }}"
          $libPath = "${{ env.pythonLocation }}\\libs\\python$($py.Replace('.', '')).lib"
          if (!(Test-Path $libPath)) {
            Write-Host "pythonXY.lib missing, generating..."
            & "${{ env.pythonLocation }}\\python.exe" -c "import distutils.sysconfig, shutil, sys; libdir = distutils.sysconfig.get_config_var('LIBDIR'); libname = distutils.sysconfig.get_config_var('LDLIBRARY'); src = libdir + '\\\\' + libname; dst = sys.prefix + '\\\\libs\\\\' + libname; shutil.copyfile(src, dst)"
          }
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i ${{ matrix.interpreter }}
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-win-${{ matrix.target }}-${{ matrix.interpreter }}
          path: dist

  macos:
    name: Build Wheels (macOS)
    runs-on: macos-latest
    needs: lint_and_test
    strategy:
      matrix:
        platform:
          - target: x64
            interpreter: 3.9 3.10 3.11 3.12 3.13 pypy3.9 pypy3.10 pypy3.11
          - target: aarch64
            interpreter: 3.9 3.10 3.11 3.12 3.13 pypy3.9 pypy3.10 pypy3.11
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i ${{ matrix.platform.interpreter }}
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-mac-${{ matrix.platform.target }}
          path: dist

  sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, windows, macos, sdist, musllinux]
    steps:
      - name: Download all wheels and sdist
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
      - name: Move packages to dist directory
        run: |
          mkdir -p dist
          mv *.whl *.tar.gz dist/
          echo "Moved packages to dist/:"
          ls -l dist
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing
